# HTTP listen port
listen = "0.0.0.0:9090"

# Enable logging
verbose = true

# Time server
time_server = "192.168.0.89"

[ sensors ]
  # Polling time in second for gathering data from RPi and Arduino
  # this interval must be longer than the number of sensors multiplied by 2 seconds
  poll_interval = 30
  # list of sensors, which values are linear, to be requested to Arduino
  arduino_linear = [ 'H','T']
  # list of sensors, which values can vary exponentially, to be requested to Arduino
  arduino_exp = [ 'R','G','B','C']
  # BMP180 sensor enables on RPi
  bmp = false
  # DHT11 sensor
  dht = false
  # pollutions sensor
  sds11 = true
  # sensor adjustments
  [ sensors.adj_H ]
      value = +0
  [ sensors.adj_T ]
      value = -0

# Arduino Serial setup
[serial]
  tty = "/dev/ttyUSB0" # set none to disable
  baud = 9600
  timeout = 1950 #in milliseconds

# GPIO Inputs
[ inputs ]
  [ inputs.human ]
     pin = 0
   [inputs.rain]
     pin = 0

#  GPIO Outputs
[ outputs ]
  [ outputs.alarm ]
    pin = 0
  [ outputs.socket1 ]
    pin = 0
  [ outputs.socket2 ]
    pin = 0
  [ outputs.water_supply ]
    pin = 0

[ data_analysis ]
  # Max cache validity: after so many failed reads, it will use zero
  cache_age = 5
  # historic data depth: how many samples we keep to estimate a good value
  historic_depth = 7 
  # Sensor readings sanity checks: successive readings cannot deviate more than a given %
  upper_limit = 1.2 # this equates to +20%
  lower_limit = 0.8 # this equates to -20%

[ alarms ]
  siren_enabled = false # Remember to configure the GPIO output pin!
  email_enabled = false
  smtp = "smtp.aol.com:587"
  mailbox = "maurorappa@aol.co.uk"
  auth_user = "maurorappa"
  auth_pwd = ".."
  # temperature threshold
  critical_temp = 16
  # presence alarm
  presence = false # Remember to set up the right GPIO in human
  # Slack notification
  token = "xoxp-513737629045-514938072262-514943142246-2b50efd8e3f1fe21a4....."
  # Melody to be played by the buzzer
  melody = "M;5555;9999;4444;9999"

[ lighting ]
# Remember to set GPIO2 Pin
  red_threshold = 0
  start_hour = 8
  end_hour = 20

[ speech ]
  # first words used before the stats
  message = "Hi, here's the status"
  # list of sensor to Be read
  read = [ 'H','T']

[ temp_control ]
  # remember to enable outputs.water_supply
  enabled = true
  # temperature threshold
  critical_temp = 16
  # seconds to keep the water flowing
  tap_open = 120

