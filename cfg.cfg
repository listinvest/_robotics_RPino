# HTTP listen port
listen = "0.0.0.0:9090"

# Enable logging
verbose = true

[ sensors ]
  # Polling time in second for gathering data from RPi and Arduino
  # this interval must be longer than the number of sensors multiplied by 2 seconds
  poll_interval = 30
  # list of sensors, which values are linear, to be requested to Arduino
  arduino_linear = [ 'H','T','L','V']
  # list of sensors, which values can vary exponentially, to be requested to Arduino
  arduino_exp = [ 'R','G','B','C']
  # sensor adjustments
  [ sensors.adj_H ]
      value = +10
  [ sensors.adj_T ]
      value = -2

# Arduino Serial setup
[serial]
  tty = "/dev/ttyAMA0"
  baud = 9600
  timeout = 1950 #in milliseconds

# GPIO Inputs
[ inputs ]
#  [ inputs.human ]
#    pin = 18

#  GPIO Outputs
[ outputs ]
  [ outputs.alarm ]
    pin = 17
  [ outputs.socket1 ]
    pin = 5
  [ outputs.socket2 ]
    pin = 6

[ data_analysis ]
  # historic data depth: how many samples we keep to estimate a good value
  historic_depth = 7 
  # percentile of the historic data
  percentile = 0.8
  # max usage of cached data
  cache_limit = 3
  # Sensor readings sanity checks: successive readings cannot deviate more than a given %
  upper_limit = 1.2 # this equates to +20%
  lower_limit = 0.8 # this equates to -20%
  #mma values
  mma_1st = 3
  mma_2st = 1

[ alarms ]
  # Alarm: temperature threshold
  critical_temp = 16
  email_enabled = true
  smtp = "smtp.aol.com:587"
  mailbox = "maurorappa@aol.co.uk"
  auth_user = "maurorappa"
  auth_pwd = ".."
  siren_enabled = true #Remember to configure the GPIO output pin!

[ speech ]
  # first words used before the stats
  message = "Hi, here's the status"
  # list of sensor to be read
  read = [ 'H','T']
